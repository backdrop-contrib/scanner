<?php

/**
 * @file
 * Search and Replace Scanner - works on all nodes text content.
 */

// The special characters to escape if a search string is not a regex string.
define('SCANNER_REGEX_CHARS', '.\/+*?[^]$() {}=!<>|:');

// The modes that the search-and-replace process can be in.
// Need to track the modes to prevent accidentally starting a replacement or a
// long search if a user leaves mid-way through the process and comes back
// again with the same session variables.
define('SCANNER_STATUS_GO_SEARCH', 1);
define('SCANNER_STATUS_GO_CONFIRM', 2);
define('SCANNER_STATUS_GO_REPLACE', 3);

/**
 * Implements hook_menu().
 */
function scanner_menu() {
  $items['admin/content/scanner'] = array(
    'title' => 'Search and Replace Scanner',
    'description' => 'Find (and replace) keywords in all your content.',
    'page callback' => 'scanner_view',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'access arguments' => array('perform search'),
    'file' => 'scanner.pages.inc',
  );
  $items['admin/content/scanner/scan'] = array(
    'title' => 'Search',
    'access arguments' => array('perform search'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/content/scanner/scan/confirm'] = array(
    'title' => 'Confirm Replace',
    'access arguments' => array('perform search and replace'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scanner_confirm_form'),
    'type' => MENU_CALLBACK,
    'file' => 'scanner.pages.inc',
  );
  $items['admin/content/scanner/undo'] = array(
    'title' => 'Undo',
    'page callback' => 'scanner_undo_page',
    'access arguments' => array('perform search and replace'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'scanner.pages.inc',
  );
  $items['admin/content/scanner/undo/confirm'] = array(
    'title' => 'Confirm Undo',
    'access arguments' => array('perform search and replace'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scanner_undo_confirm_form'),
    'type' => MENU_CALLBACK,
    'file' => 'scanner.pages.inc',
  );
  $items['admin/config/content/scanner'] = array(
    'title' => 'Search and Replace Scanner',
    'description' => 'Configure defaults and what fields can be searched and replaced.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scanner_admin_form'),
    'access arguments' => array('administer scanner settings'),
    'file' => 'scanner.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function scanner_theme() {
  return array(
    'scanner_results' => array(
      'file' => 'scanner.theme.inc',
      'variables' => array(
        'results' => NULL,
      ),
    ),
    'scanner_item' => array(
      'file' => 'scanner.theme.inc',
      'variables' => array(
        'item' => NULL,
      ),
    ),
    'scanner_replace_results' => array(
      'file' => 'scanner.theme.inc',
      'variables' => array(
        'results' => NULL,
      ),
    ),
    'scanner_replace_item' => array(
      'file' => 'scanner.theme.inc',
      'variables' => array(
        'item' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function scanner_permission() {
  return array(
    'administer scanner settings' => array(
      'title' => t('Administer scanner settings'),
    ),
    'perform search and replace' => array(
      'title' => t('Perform search and replace'),
    ),
    'perform search' => array(
      'title' => t('Perform search only'),
    ),
  );
}

/**
 * Implements hook_scanner_query_where().
 */
function scanner_scanner_query_where(&$or, $table, $field, $where, $binary) {
  // Base field.
  $or->condition('t.' . $field, $where, 'REGEXP' . $binary);
}

/**
 * Implements hook_scanner_preg_match_all().
 */
function scanner_scanner_preg_match_all(&$matches, $regexstr, $row) {
  return preg_match_all($regexstr, $row->content, $matches, PREG_OFFSET_CAPTURE);
}

/**
 * Implements hook_scanner_preg_replace().
 */
function scanner_scanner_preg_replace(&$node, $field, $matches, $row, $regexstr, $replace) {
  $language = NULL;
  $hits = 0;
  $old_value = NULL;

  if (!empty($matches[1])) {
    $language = field_language('node', $node, $matches[1]);
    // Not every field has a 'value'.
    if (isset($node->{$matches[1]}[$language][$row->delta]['value'])) {
      $old_value = $node->{$matches[1]}[$language][$row->delta]['value'];
    }
  }
  else {
    $old_value = $node->{$field};
  }

  // Replace the string if one was identified.
  if (isset($old_value)) {
    $new_value = preg_replace($regexstr, $replace, $old_value, -1, $hits);
  }

  if (!empty($matches[1])) {
    // Not every field has a 'value'.
    if (isset($node->{$matches[1]}[$language][$row->delta]['value'])) {
      $node->{$matches[1]}[$language][$row->delta]['value'] = $new_value;
    }
  }
  else {
    $node->{$field} = $new_value;
  }

  return $hits;
}

/**
 * Implements hook_scanner_fields_alter().
 */
function field_collection_scanner_fields_alter(array &$all_field_records, $node_bundle = NULL, $parent_bundle = NULL, $parents = NULL) {
  // On behalf of field_collection.module.
  $query = db_select('field_config_instance', 'instance_parent');
  $query->join('field_config', 'config_parent', 'instance_parent.field_name = config_parent.field_name');
  $query->join('field_config_instance', 'instance_child', 'instance_child.bundle = config_parent.field_name');
  $query->join('field_config', 'config_child', 'instance_child.field_name = config_child.field_name');
  $query->fields('config_child', array('field_name', 'module'));
  $query->fields('instance_parent', array('bundle'));
  $query->addField('config_parent', 'field_name', 'field_collection_name');
  if ($parent_bundle) {
    $query->condition('config_parent.field_name', $parent_bundle);
    $query->condition('instance_parent.entity_type', 'field_collection_item');
  }
  else {
    $query->condition('instance_parent.entity_type', 'node');
  }
  $query->condition('instance_child.entity_type', 'field_collection_item');
  $query->condition('config_child.module', array('text', 'field_collection'), 'IN');

  $result = $query->execute();

  foreach ($result as $record) {
    $field_parents = $parents ?? array($record->field_collection_name);
    $record->node_bundle = $node_bundle ?? $record->bundle;
    if ($record->module == 'text') {
      $record->field_collection_parents = $field_parents;
      $all_field_records[] = $record;
    }
    elseif ($record->module == 'field_collection') {
      // This if statement prevents infinite recursion if a field collection is
      // nested within itself.
      if (!in_array($record->field_name, $field_parents)) {
        $field_parents[] = $record->field_name;
        field_collection_scanner_fields_alter($all_field_records, $record->node_bundle, $record->field_name, $field_parents);
      }
    }
  }
}

/**
 * Implements hook_scanner_field_types().
 */
function link_scanner_field_types() {
  // Performed on behalf of link.module.
  return array('link');
}

/**
 * Implements hook_scanner_field_suffix_alter().
 */
function link_scanner_field_suffix_alter(&$suffix, $map) {
  // Performed on behalf of link.module.
  if (isset($map['module']) && $map['module'] == 'link') {
    $suffix = 'title';
  }
}

/**
 * Implements hook_scanner_query_where().
 */
function link_scanner_query_where(&$or, $table, $field, $where, $binary) {
  // Performed on behalf of link.module.
  if (strpos($field, '_title') != FALSE) {
    $field_url = rtrim($field, '_title') . '_url';
    if (db_field_exists($table, $field_url)) {
      $or->condition('t.' . $field_url, $where, 'REGEXP' . $binary);
    }
  }
}

/**
 * Implements hook_scanner_preg_replace().
 */
function link_scanner_preg_replace(&$node, $field, $matches, $row, $regexstr, $replace) {
  // Performed on behalf of link.module.
  $hits = 0;

  if (!empty($matches[1])) {
    $language = field_language('node', $node, $matches[1]);

    // The Link module uses two field values - 'title' and 'url', so each one
    // needs to be checked separately.
    foreach (array('title', 'url') as $field_key) {
      if (isset($node->{$matches[1]}[$language][$row->delta][$field_key])) {
        $old_value = $node->{$matches[1]}[$language][$row->delta][$field_key];
        $new_value = preg_replace($regexstr, $replace, $old_value, -1, $new_hits);
        if ($new_hits > 0) {
          $node->{$matches[1]}[$language][$row->delta][$field_key] = $new_value;
          $hits += $new_hits;
        }
      }
    }
  }

  return $hits;
}

/**
 * Implements hook_scanner_query_alter().
 */
function node_scanner_query_alter(&$query, $map, $table, $field) {
  // Performed on behalf of node.module.
  $query->condition('n.status', '1', '=');
}

/**
 * Implements hook_scanner_field_types().
 */
function text_scanner_field_types() {
  // Performed on behalf of text.module.
  return array('text');
}

/**
 * Implements hook_scanner_query_where().
 */
function text_scanner_query_where(&$or, $table, $field, $where, $binary) {
  // Performed on behalf of text.module.
  $field_summary = rtrim($field, '_value') . '_summary';
  if (db_field_exists($table, $field_summary)) {
    $or->condition('t.' . $field_summary, $where, 'REGEXP' . $binary);
  }
}

/**
 * Implements hook_scanner_query_alter().
 */
function text_scanner_query_alter(&$query, $map, $table, $field) {
  // Performed on behalf of text.module.
  $summary_field = rtrim($field, '_value') . '_summary';

  // A 'summary' value exists for this field.
  if (db_field_exists($table, $summary_field)) {
    $query->addField('t', $field_summary, 'summary');
  }
}

/**
 * Implements hook_scanner_preg_match_all().
 */
function text_scanner_preg_match_all(&$matches, $regexstr, $row) {
  // Performed on behalf of text.module.
  if (!empty($row->summary)) {
    return preg_match_all($regexstr, $row->summary, $matches, PREG_OFFSET_CAPTURE);
  }
  return 0;
}

/**
 * Implements hook_scanner_preg_replace().
 */
function text_scanner_preg_replace(&$node, $field, $matches, $row, $regexstr, $replace) {
  // Performed on behalf of text.module.
  if (!empty($row->summary) && !empty($matches)) {
    $old_value = $node->{$matches[1]}[$language][$row->delta]['summary'];
    $new_value = preg_replace($regexstr, $replace, $old_value, -1, $hits);
    $node->{$matches[1]}[$language][$row->delta]['summary'] = $new_value;
    return $hits;
  }
  return 0;
}
